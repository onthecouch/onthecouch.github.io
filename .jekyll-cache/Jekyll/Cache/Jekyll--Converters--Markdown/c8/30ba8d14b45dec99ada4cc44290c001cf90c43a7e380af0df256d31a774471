I"Úc<p>In this post, I will show you how to create a PowerShell profile and configure how PowerShell start. <a href="https://docs.microsoft.com/en-us/powershell/scripting/overview?view=powershell-7.2">What is PowerShell?</a> Read that from the MSDN. Iâ€™m not gonna post about what is PowerShell? or something like the history of powershell to make this post looks like a wall of text, while you can read that on official microsoft documentation or just google it.</p>

<p>With the PowerShell profile you can create:</p>
<ul>
  <li>Style your PowerShell.</li>
  <li>Create aliases.</li>
  <li>Set default variables.</li>
  <li>Import Modules.</li>
  <li>Most important thing is, make your life easy with PowerShell.</li>
</ul>

<p>Assuming you already have powershell 7 installed on your machine (Iâ€™m using Powershell 7), or if not you can <a href="https://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-windows?view=powershell-7.2">Download PowerShell 7</a>, choose which one suits you to install it on your machine.</p>

<p>Later, check if its profile already installed on your windows by running this command as admin.</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Test-Path</span><span class="w"> </span><span class="bp">$PROFILE</span><span class="w">
</span></code></pre></div></div>

<p>If the output is false then run</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">New-Item</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="nv">$profile</span><span class="w"> </span><span class="nt">-Type</span><span class="w"> </span><span class="nx">File</span><span class="w"> </span><span class="nt">-Force</span><span class="w">
</span></code></pre></div></div>

<p>Set the Execution Policy to Remote Signed. Otherwise, you wonâ€™t be able to run the script when PowerShell opens. Make sure you run PowerShell as admin mode to change the execution policy:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-ExecutionPolicy</span><span class="w">

</span><span class="c"># Set the ExecutionPolicy to RemoteSigned:</span><span class="w">
</span><span class="n">Set-ExecutionPolicy</span><span class="w"> </span><span class="nx">RemoteSigned</span><span class="w">
</span></code></pre></div></div>
<p>Time to edit your powershell profile. run this command and use whatever editor you liked. (Iâ€™m using Visual Studio Code)</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">code</span><span class="w"> </span><span class="nv">$profile</span><span class="w">
</span></code></pre></div></div>
<h3 id="style-your-powershell">Style your PowerShell.</h3>

<p>Customizing the PowerShell looks to your liking, change the background color and settings the font. Below is the profile of mine, feel free to copy paste it. Iâ€™m using dracula color scheme because itâ€™s look colorful in my boring life.</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">POSH_GIT_ENABLED</span><span class="o">=</span><span class="bp">$true</span><span class="w">
</span><span class="n">Import-Module</span><span class="w"> </span><span class="nx">posh-git</span><span class="w">
</span><span class="n">Import-Module</span><span class="w"> </span><span class="nt">-Name</span><span class="w"> </span><span class="nx">Terminal-Icons</span><span class="w">
</span><span class="n">Import-Module</span><span class="w"> </span><span class="nx">PSReadLine</span><span class="w">

</span><span class="c"># Dracula readline configuration. Requires version 2.0, if you have 1.2 convert to `Set-PSReadlineOption -TokenType`</span><span class="w">
</span><span class="n">Set-PSReadlineOption</span><span class="w"> </span><span class="nt">-Color</span><span class="w"> </span><span class="p">@{</span><span class="w">
    </span><span class="s2">"Command"</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="n">ConsoleColor</span><span class="p">]</span><span class="err">::</span><span class="nx">Green</span><span class="w">
    </span><span class="s2">"Parameter"</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="n">ConsoleColor</span><span class="p">]</span><span class="err">::</span><span class="nx">Gray</span><span class="w">
    </span><span class="s2">"Operator"</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="n">ConsoleColor</span><span class="p">]</span><span class="err">::</span><span class="nx">Magenta</span><span class="w">
    </span><span class="s2">"Variable"</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="n">ConsoleColor</span><span class="p">]</span><span class="err">::</span><span class="nx">White</span><span class="w">
    </span><span class="s2">"String"</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="n">ConsoleColor</span><span class="p">]</span><span class="err">::</span><span class="nx">Yellow</span><span class="w">
    </span><span class="s2">"Number"</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="n">ConsoleColor</span><span class="p">]</span><span class="err">::</span><span class="nx">Blue</span><span class="w">
    </span><span class="s2">"Type"</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="n">ConsoleColor</span><span class="p">]</span><span class="err">::</span><span class="nx">Cyan</span><span class="w">
    </span><span class="s2">"Comment"</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="n">ConsoleColor</span><span class="p">]</span><span class="err">::</span><span class="nx">DarkCyan</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="c"># Dracula Prompt Configuration</span><span class="w">
</span><span class="n">Import-Module</span><span class="w"> </span><span class="nx">posh-git</span><span class="w">
</span><span class="nv">$GitPromptSettings</span><span class="o">.</span><span class="nf">DefaultPromptPrefix</span><span class="o">.</span><span class="nf">Text</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"</span><span class="si">$(</span><span class="p">[</span><span class="n">char</span><span class="p">]</span><span class="mi">0</span><span class="n">x2192</span><span class="p">)</span><span class="w"> </span><span class="s2">" # arrow unicode symbol
</span><span class="nv">$GitPromptSettings</span><span class="s2">.DefaultPromptPrefix.ForegroundColor = [ConsoleColor]::Green
</span><span class="nv">$GitPromptSettings</span><span class="s2">.DefaultPromptPath.ForegroundColor =[ConsoleColor]::Cyan
</span><span class="nv">$GitPromptSettings</span><span class="s2">.DefaultPromptSuffix.Text = "</span><span class="err">$</span><span class="p">([</span><span class="n">char</span><span class="p">]</span><span class="mi">0</span><span class="n">x203A</span><span class="p">)</span><span class="w"> </span><span class="s2">" # chevron unicode symbol
</span><span class="nv">$GitPromptSettings</span><span class="s2">.DefaultPromptSuffix.ForegroundColor = [ConsoleColor]::Magenta
# Dracula Git Status Configuration
</span><span class="nv">$GitPromptSettings</span><span class="s2">.BeforeStatus.ForegroundColor = [ConsoleColor]::Blue
</span><span class="nv">$GitPromptSettings</span><span class="s2">.BranchColor.ForegroundColor = [ConsoleColor]::Blue
</span><span class="nv">$GitPromptSettings</span><span class="s2">.AfterStatus.ForegroundColor = [ConsoleColor]::Blue


Set-PSReadLineOption -PredictionSource History
Set-PSReadLineOption -PredictionViewStyle ListView
Set-PSReadLineOption -EditMode Windows

# Clipboard interaction is bound by default in Windows mode, but not Emacs mode.
Set-PSReadLineKeyHandler -Key Ctrl+C -Function Copy
Set-PSReadLineKeyHandler -Key Ctrl+v -Function Paste

Set-PSReadLineKeyHandler -Key ')',']','}' </span><span class="se">`</span><span class="s2">
                         -BriefDescription SmartCloseBraces </span><span class="se">`</span><span class="s2">
                         -LongDescription "</span><span class="n">Insert</span><span class="w"> </span><span class="nx">closing</span><span class="w"> </span><span class="nx">brace</span><span class="w"> </span><span class="nx">or</span><span class="w"> </span><span class="nx">skip</span><span class="s2">" </span><span class="se">`</span><span class="s2">
                         -ScriptBlock {
    param(</span><span class="nv">$key</span><span class="s2">, </span><span class="nv">$arg</span><span class="s2">)

    </span><span class="nv">$line</span><span class="s2"> = </span><span class="bp">$null</span><span class="s2">
    </span><span class="nv">$cursor</span><span class="s2"> = </span><span class="bp">$null</span><span class="s2">
    [Microsoft.PowerShell.PSConsoleReadLine]::GetBufferState([ref]</span><span class="nv">$line</span><span class="s2">, [ref]</span><span class="nv">$cursor</span><span class="s2">)

    if (</span><span class="nv">$line</span><span class="s2">[</span><span class="nv">$cursor</span><span class="s2">] -eq </span><span class="nv">$key</span><span class="s2">.KeyChar)
    {
        [Microsoft.PowerShell.PSConsoleReadLine]::SetCursorPosition(</span><span class="nv">$cursor</span><span class="s2"> + 1)
    }
    else
    {
        [Microsoft.PowerShell.PSConsoleReadLine]::Insert("</span><span class="err">$</span><span class="p">(</span><span class="nv">$key</span><span class="o">.</span><span class="nf">KeyChar</span><span class="si">)</span><span class="s2">"</span><span class="p">)</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="n">Set-PSReadLineKeyHandler</span><span class="w"> </span><span class="nt">-Key</span><span class="w"> </span><span class="nx">Backspace</span><span class="w"> </span><span class="se">`
</span><span class="w">                         </span><span class="nt">-BriefDescription</span><span class="w"> </span><span class="nx">SmartBackspace</span><span class="w"> </span><span class="se">`
</span><span class="w">                         </span><span class="nt">-LongDescription</span><span class="w"> </span><span class="s2">"Delete previous character or matching quotes/parens/braces"</span><span class="w"> </span><span class="se">`
</span><span class="w">                         </span><span class="nt">-ScriptBlock</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="kr">param</span><span class="p">(</span><span class="nv">$key</span><span class="p">,</span><span class="w"> </span><span class="nv">$arg</span><span class="p">)</span><span class="w">

    </span><span class="nv">$line</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$null</span><span class="w">
    </span><span class="nv">$cursor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$null</span><span class="w">
    </span><span class="p">[</span><span class="n">Microsoft.PowerShell.PSConsoleReadLine</span><span class="p">]::</span><span class="n">GetBufferState</span><span class="p">([</span><span class="n">ref</span><span class="p">]</span><span class="nv">$line</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="n">ref</span><span class="p">]</span><span class="nv">$cursor</span><span class="p">)</span><span class="w">

    </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="nv">$cursor</span><span class="w"> </span><span class="o">-gt</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nv">$toMatch</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$null</span><span class="w">
        </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="nv">$cursor</span><span class="w"> </span><span class="o">-lt</span><span class="w"> </span><span class="nv">$line</span><span class="o">.</span><span class="nf">Length</span><span class="p">)</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="kr">switch</span><span class="w"> </span><span class="p">(</span><span class="nv">$line</span><span class="p">[</span><span class="nv">$cursor</span><span class="p">])</span><span class="w">
            </span><span class="p">{</span><span class="w">
                </span><span class="cm">&lt;#case#&gt;</span><span class="w"> </span><span class="s1">'"'</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nv">$toMatch</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'"'</span><span class="p">;</span><span class="w"> </span><span class="kr">break</span><span class="w"> </span><span class="p">}</span><span class="w">
                </span><span class="cm">&lt;#case#&gt;</span><span class="w"> </span><span class="s2">"'"</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nv">$toMatch</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"'"</span><span class="p">;</span><span class="w"> </span><span class="kr">break</span><span class="w"> </span><span class="p">}</span><span class="w">
                </span><span class="cm">&lt;#case#&gt;</span><span class="w"> </span><span class="s1">')'</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nv">$toMatch</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'('</span><span class="p">;</span><span class="w"> </span><span class="kr">break</span><span class="w"> </span><span class="p">}</span><span class="w">
                </span><span class="cm">&lt;#case#&gt;</span><span class="w"> </span><span class="s1">']'</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nv">$toMatch</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'['</span><span class="p">;</span><span class="w"> </span><span class="kr">break</span><span class="w"> </span><span class="p">}</span><span class="w">
                </span><span class="cm">&lt;#case#&gt;</span><span class="w"> </span><span class="s1">'}'</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nv">$toMatch</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'{'</span><span class="p">;</span><span class="w"> </span><span class="kr">break</span><span class="w"> </span><span class="p">}</span><span class="w">
            </span><span class="p">}</span><span class="w">
        </span><span class="p">}</span><span class="w">

        </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="nv">$toMatch</span><span class="w"> </span><span class="o">-ne</span><span class="w"> </span><span class="bp">$null</span><span class="w"> </span><span class="o">-and</span><span class="w"> </span><span class="nv">$line</span><span class="p">[</span><span class="nv">$cursor</span><span class="nt">-1</span><span class="p">]</span><span class="w"> </span><span class="o">-eq</span><span class="w"> </span><span class="nv">$toMatch</span><span class="p">)</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="p">[</span><span class="n">Microsoft.PowerShell.PSConsoleReadLine</span><span class="p">]::</span><span class="n">Delete</span><span class="p">(</span><span class="nv">$cursor</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">)</span><span class="w">
        </span><span class="p">}</span><span class="w">
        </span><span class="kr">else</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="p">[</span><span class="n">Microsoft.PowerShell.PSConsoleReadLine</span><span class="p">]::</span><span class="n">BackwardDeleteChar</span><span class="p">(</span><span class="nv">$key</span><span class="p">,</span><span class="w"> </span><span class="nv">$arg</span><span class="p">)</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="c"># F1 for help on the command line - naturally</span><span class="w">
</span><span class="n">Set-PSReadLineKeyHandler</span><span class="w"> </span><span class="nt">-Key</span><span class="w"> </span><span class="nx">F1</span><span class="w"> </span><span class="se">`
</span><span class="w">                         </span><span class="nt">-BriefDescription</span><span class="w"> </span><span class="nx">CommandHelp</span><span class="w"> </span><span class="se">`
</span><span class="w">                         </span><span class="nt">-LongDescription</span><span class="w"> </span><span class="s2">"Open the help window for the current command"</span><span class="w"> </span><span class="se">`
</span><span class="w">                         </span><span class="nt">-ScriptBlock</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="kr">param</span><span class="p">(</span><span class="nv">$key</span><span class="p">,</span><span class="w"> </span><span class="nv">$arg</span><span class="p">)</span><span class="w">

    </span><span class="nv">$ast</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$null</span><span class="w">
    </span><span class="nv">$tokens</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$null</span><span class="w">
    </span><span class="nv">$errors</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$null</span><span class="w">
    </span><span class="nv">$cursor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$null</span><span class="w">
    </span><span class="p">[</span><span class="n">Microsoft.PowerShell.PSConsoleReadLine</span><span class="p">]::</span><span class="n">GetBufferState</span><span class="p">([</span><span class="n">ref</span><span class="p">]</span><span class="nv">$ast</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="n">ref</span><span class="p">]</span><span class="nv">$tokens</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="n">ref</span><span class="p">]</span><span class="nv">$errors</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="n">ref</span><span class="p">]</span><span class="nv">$cursor</span><span class="p">)</span><span class="w">

    </span><span class="nv">$commandAst</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$ast</span><span class="o">.</span><span class="nf">FindAll</span><span class="p">(</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nv">$node</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$args</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="w">
        </span><span class="nv">$node</span><span class="w"> </span><span class="o">-is</span><span class="w"> </span><span class="p">[</span><span class="n">CommandAst</span><span class="p">]</span><span class="w"> </span><span class="o">-and</span><span class="w">
            </span><span class="nv">$node</span><span class="o">.</span><span class="nf">Extent</span><span class="o">.</span><span class="nf">StartOffset</span><span class="w"> </span><span class="o">-le</span><span class="w"> </span><span class="nv">$cursor</span><span class="w"> </span><span class="o">-and</span><span class="w">
            </span><span class="nv">$node</span><span class="o">.</span><span class="nf">Extent</span><span class="o">.</span><span class="nf">EndOffset</span><span class="w"> </span><span class="o">-ge</span><span class="w"> </span><span class="nv">$cursor</span><span class="w">
        </span><span class="p">},</span><span class="w"> </span><span class="bp">$true</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Select-Object</span><span class="w"> </span><span class="nt">-Last</span><span class="w"> </span><span class="nx">1</span><span class="w">

    </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="nv">$commandAst</span><span class="w"> </span><span class="o">-ne</span><span class="w"> </span><span class="bp">$null</span><span class="p">)</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nv">$commandName</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$commandAst</span><span class="o">.</span><span class="nf">GetCommandName</span><span class="p">()</span><span class="w">
        </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="nv">$commandName</span><span class="w"> </span><span class="o">-ne</span><span class="w"> </span><span class="bp">$null</span><span class="p">)</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nv">$command</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$ExecutionContext</span><span class="o">.</span><span class="nf">InvokeCommand</span><span class="o">.</span><span class="nf">GetCommand</span><span class="p">(</span><span class="nv">$commandName</span><span class="p">,</span><span class="w"> </span><span class="s1">'All'</span><span class="p">)</span><span class="w">
            </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="nv">$command</span><span class="w"> </span><span class="o">-is</span><span class="w"> </span><span class="p">[</span><span class="n">AliasInfo</span><span class="p">])</span><span class="w">
            </span><span class="p">{</span><span class="w">
                </span><span class="nv">$commandName</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$command</span><span class="o">.</span><span class="nf">ResolvedCommandName</span><span class="w">
            </span><span class="p">}</span><span class="w">

            </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="nv">$commandName</span><span class="w"> </span><span class="o">-ne</span><span class="w"> </span><span class="bp">$null</span><span class="p">)</span><span class="w">
            </span><span class="p">{</span><span class="w">
                </span><span class="n">Get-Help</span><span class="w"> </span><span class="nv">$commandName</span><span class="w"> </span><span class="nt">-ShowWindow</span><span class="w">
            </span><span class="p">}</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Adding those in your profile will make your load of PowerShell takes times. Depending on what modules you have. Talk about modules you see Iâ€™m currently using three modules.</p>

<p><strong>posh git</strong>
Well you know what it is, Itâ€™s a git module for PowerShell by providing the git status on PowerShell. <a href="https://github.com/dahlbyk/posh-git">View on github</a> for the installation.</p>

<p><strong>name terminal icons</strong>
A PowerShell module to show file and folder icons in the terminal. <a href="https://github.com/devblackops/Terminal-Icons">View on github</a> for the installation.</p>

<p><strong>PSReadLine</strong>
Replacing command line editing of Powershell. <a href="https://github.com/PowerShell/PSReadLine">View on github</a> for the installation. Also almost missed it, install <a href="https://www.nerdfonts.com/font-downloads">NerdFont</a> first before making change to your profile.</p>

<p><img src="./assets/img/posts/posh.jpg" alt="Final Look" />
<small>Final Look </small></p>
:ET